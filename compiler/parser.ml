type token =
  | EOF
  | INT of (
# 6 "parser.mly"
        int
# 7 "parser.ml"
)
  | IDENT of (
# 7 "parser.mly"
        string
# 12 "parser.ml"
)
  | STRING of (
# 8 "parser.mly"
        string
# 17 "parser.ml"
)
  | TRUE
  | FALSE
  | RECT
  | CIRCLE
  | TRIANGLE
  | LINE
  | FORCE
  | WIN
  | FPS
  | BACKGROUND
  | COLONEQUAL
  | DOT_X
  | DOT_Y
  | DOT_WIDTH
  | DOT_HEIGHT
  | DOT_COLOR
  | DOT_RADIUS
  | WHILE
  | DO
  | DONE
  | BEGIN
  | END
  | RETURN
  | VAR
  | PLUS
  | MINUS
  | MULT
  | DIV
  | EQUALEQUAL
  | GREATER
  | SMALLER
  | GREATEREQUAL
  | SMALLEREQUAL
  | LPAR
  | RPAR
  | SEMICOLON
  | COMMA
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | DOT
  | IF
  | THEN
  | ELSE
  | ENDIF
  | PRINT

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
open Ast ;;
# 71 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  260 (* TRUE *);
  261 (* FALSE *);
  262 (* RECT *);
  263 (* CIRCLE *);
  264 (* TRIANGLE *);
  265 (* LINE *);
  266 (* FORCE *);
  267 (* WIN *);
  268 (* FPS *);
  269 (* BACKGROUND *);
  270 (* COLONEQUAL *);
  271 (* DOT_X *);
  272 (* DOT_Y *);
  273 (* DOT_WIDTH *);
  274 (* DOT_HEIGHT *);
  275 (* DOT_COLOR *);
  276 (* DOT_RADIUS *);
  277 (* WHILE *);
  278 (* DO *);
  279 (* DONE *);
  280 (* BEGIN *);
  281 (* END *);
  282 (* RETURN *);
  283 (* VAR *);
  284 (* PLUS *);
  285 (* MINUS *);
  286 (* MULT *);
  287 (* DIV *);
  288 (* EQUALEQUAL *);
  289 (* GREATER *);
  290 (* SMALLER *);
  291 (* GREATEREQUAL *);
  292 (* SMALLEREQUAL *);
  293 (* LPAR *);
  294 (* RPAR *);
  295 (* SEMICOLON *);
  296 (* COMMA *);
  297 (* LBRACKET *);
  298 (* RBRACKET *);
  299 (* LBRACE *);
  300 (* RBRACE *);
  301 (* DOT *);
  302 (* IF *);
  303 (* THEN *);
  304 (* ELSE *);
  305 (* ENDIF *);
  306 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
  259 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\005\000\004\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\021\000\022\000\
\023\000\023\000\025\000\025\000\026\000\026\000\018\000\027\000\
\027\000\028\000\028\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\029\000\029\000\030\000\030\000\024\000\024\000\
\031\000\031\000\031\000\031\000\031\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\003\000\006\000\
\006\000\006\000\006\000\007\000\007\000\007\000\007\000\007\000\
\006\000\006\000\007\000\007\000\007\000\006\000\005\000\005\000\
\000\000\002\000\000\000\002\000\001\000\002\000\008\000\000\000\
\002\000\000\000\003\000\007\000\005\000\004\000\007\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\005\000\005\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\001\000\004\000\000\000\001\000\000\000\002\000\000\000\003\000\
\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\097\000\000\000\100\000\098\000\099\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\102\000\000\000\
\003\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\000\000\021\000\022\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\000\000\072\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\056\000\074\000\023\000\000\000\088\000\000\000\000\000\
\000\000\000\000\085\000\086\000\000\000\000\000\000\000\000\000\
\000\000\054\000\000\000\049\000\000\000\094\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\040\000\077\000\090\000\053\000\000\000\000\000\
\000\000\000\000\076\000\051\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\033\000\038\000\026\000\024\000\000\000\044\000\000\000\
\055\000\028\000\029\000\030\000\031\000\032\000\035\000\036\000\
\037\000\052\000\047\000"

let yydgoto = "\002\000\
\023\000\024\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\040\000\073\000\114\000\074\000\075\000\115\000\142\000\
\199\000\076\000\098\000\140\000\078\000\099\000\045\000"

let yysindex = "\017\000\
\001\000\000\000\000\000\000\000\246\254\000\000\000\000\000\000\
\026\255\034\255\037\255\072\255\038\255\062\255\006\255\055\255\
\006\255\098\255\006\255\006\255\006\255\065\255\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\001\000\000\000\000\000\000\006\255\011\255\006\255\
\126\255\159\255\081\255\082\255\006\255\006\255\236\254\176\000\
\005\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\255\000\000\000\000\095\255\183\001\088\255\039\255\014\255\
\062\001\156\000\006\255\000\000\006\255\006\255\006\255\006\255\
\006\255\006\255\006\255\006\255\006\255\000\000\014\001\249\254\
\245\000\093\255\094\255\185\000\096\255\123\255\124\255\127\255\
\128\255\006\255\131\255\139\255\140\255\006\255\006\255\006\255\
\073\001\245\000\097\255\006\255\006\255\055\255\006\255\006\255\
\000\000\000\000\000\000\000\000\006\255\000\000\055\255\118\255\
\014\255\014\255\000\000\000\000\119\255\119\255\119\255\119\255\
\119\255\000\000\180\255\000\000\006\255\000\000\137\255\144\255\
\171\255\006\255\006\255\006\255\006\255\006\255\149\255\006\255\
\006\255\006\255\150\255\151\255\152\255\153\255\000\000\154\255\
\156\255\200\000\168\255\157\255\215\000\230\000\155\255\161\255\
\158\255\245\000\172\255\000\000\006\255\084\001\095\001\106\001\
\117\001\128\001\162\255\139\001\150\001\161\001\163\255\165\255\
\169\255\000\000\000\000\000\000\000\000\000\000\144\255\171\255\
\170\255\055\255\000\000\000\000\000\000\172\255\055\255\026\001\
\181\255\188\255\189\255\190\255\192\255\000\000\195\255\196\255\
\202\255\000\000\000\000\000\000\000\000\175\255\000\000\201\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\038\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\210\255\000\000\
\000\000\000\000\000\000\000\000\000\000\211\255\183\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\255\000\000\000\000\000\000\213\255\000\000\000\000\204\255\
\000\000\000\000\212\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\172\001\
\216\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\211\255\000\000\000\000\000\000\211\255\211\255\211\255\
\000\000\216\255\000\000\212\255\000\000\000\000\212\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\041\000\000\000\000\000\060\000\079\000\098\000\117\000\
\136\000\000\000\000\000\000\000\000\000\000\000\000\000\192\001\
\050\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\217\255\216\255\160\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\160\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\183\000\000\000\255\255\031\000\036\000\048\000\049\000\053\000\
\062\000\083\000\086\000\088\000\102\000\105\000\110\000\112\000\
\113\000\000\000\114\000\005\000\115\000\116\000\215\255\145\255\
\055\000\185\255\000\000\087\000\000\000\178\255\000\000"

let yytablesize = 740
let yytable = "\025\000\
\003\000\121\000\159\000\046\000\128\000\042\000\004\000\055\000\
\006\000\007\000\008\000\004\000\096\000\006\000\007\000\008\000\
\116\000\001\000\046\000\056\000\117\000\077\000\025\000\080\000\
\081\000\082\000\047\000\049\000\042\000\116\000\048\000\026\000\
\139\000\117\000\019\000\050\000\027\000\161\000\051\000\019\000\
\164\000\119\000\020\000\087\000\088\000\120\000\163\000\020\000\
\028\000\029\000\095\000\097\000\100\000\030\000\026\000\167\000\
\057\000\113\000\197\000\027\000\009\000\010\000\031\000\011\000\
\151\000\012\000\013\000\014\000\155\000\156\000\157\000\028\000\
\029\000\052\000\053\000\015\000\030\000\124\000\016\000\125\000\
\017\000\018\000\045\000\032\000\045\000\031\000\033\000\097\000\
\034\000\129\000\130\000\131\000\132\000\133\000\134\000\135\000\
\136\000\137\000\054\000\079\000\021\000\083\000\035\000\045\000\
\022\000\036\000\032\000\045\000\045\000\033\000\037\000\034\000\
\038\000\039\000\041\000\043\000\044\000\111\000\112\000\122\000\
\097\000\162\000\214\000\097\000\165\000\035\000\123\000\216\000\
\036\000\166\000\143\000\144\000\146\000\037\000\160\000\038\000\
\039\000\041\000\043\000\044\000\101\000\102\000\103\000\104\000\
\105\000\170\000\085\000\086\000\087\000\088\000\174\000\175\000\
\176\000\177\000\178\000\168\000\180\000\181\000\182\000\147\000\
\148\000\043\000\106\000\149\000\150\000\043\000\043\000\152\000\
\043\000\198\000\043\000\043\000\043\000\107\000\108\000\153\000\
\154\000\200\000\109\000\171\000\043\000\169\000\172\000\043\000\
\173\000\043\000\179\000\183\000\184\000\185\000\190\000\186\000\
\187\000\188\000\191\000\110\000\198\000\139\000\018\000\195\000\
\206\000\210\000\194\000\211\000\101\000\043\000\084\000\212\000\
\213\000\043\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\101\000\218\000\101\000\101\000\101\000\226\000\
\101\000\087\000\219\000\220\000\221\000\101\000\222\000\087\000\
\087\000\223\000\224\000\087\000\087\000\087\000\087\000\087\000\
\225\000\087\000\087\000\087\000\227\000\087\000\091\000\048\000\
\041\000\093\000\087\000\092\000\215\000\095\000\050\000\196\000\
\000\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\000\000\011\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\
\016\000\000\000\017\000\018\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\083\000\000\000\000\000\000\000\000\000\021\000\083\000\
\083\000\000\000\022\000\083\000\083\000\083\000\083\000\083\000\
\000\000\083\000\083\000\083\000\000\000\083\000\084\000\000\000\
\000\000\000\000\083\000\000\000\084\000\084\000\000\000\000\000\
\084\000\084\000\084\000\084\000\084\000\000\000\084\000\084\000\
\084\000\078\000\084\000\000\000\000\000\000\000\000\000\084\000\
\000\000\000\000\000\000\078\000\078\000\078\000\078\000\078\000\
\000\000\078\000\078\000\078\000\079\000\078\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\079\000\079\000\
\079\000\079\000\079\000\000\000\079\000\079\000\079\000\081\000\
\079\000\000\000\000\000\000\000\000\000\079\000\000\000\000\000\
\000\000\081\000\081\000\081\000\081\000\081\000\000\000\081\000\
\081\000\081\000\080\000\081\000\000\000\000\000\000\000\000\000\
\081\000\000\000\000\000\000\000\080\000\080\000\080\000\080\000\
\080\000\000\000\080\000\080\000\080\000\082\000\080\000\000\000\
\000\000\000\000\000\000\080\000\000\000\000\000\000\000\082\000\
\082\000\082\000\082\000\082\000\000\000\082\000\082\000\082\000\
\000\000\082\000\000\000\000\000\000\000\000\000\082\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\000\000\000\000\000\000\118\000\000\000\000\000\
\000\000\000\000\127\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\000\000\000\000\000\000\
\000\000\000\000\145\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\000\000\000\000\000\000\000\000\
\000\000\189\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\000\000\000\000\000\000\000\000\000\000\
\192\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\000\000\000\000\000\000\000\000\000\000\193\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\000\000\000\000\000\000\141\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\000\000\000\000\
\094\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\000\000\000\000\138\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\000\000\000\000\
\217\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\101\000\000\000\000\000\101\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\000\000\000\000\
\090\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\000\000\126\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\000\000\158\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\000\000\201\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\000\000\202\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\000\000\203\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\000\000\204\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\000\000\205\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\000\000\
\207\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\000\000\208\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\000\000\209\000\101\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\000\000\050\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000"

let yycheck = "\001\000\
\000\000\073\000\114\000\014\001\083\000\001\000\001\001\002\001\
\003\001\004\001\005\001\001\001\002\001\003\001\004\001\005\001\
\037\001\001\000\014\001\015\000\041\001\017\000\024\000\019\000\
\020\000\021\000\037\001\002\001\024\000\037\001\041\001\001\000\
\040\001\041\001\029\001\002\001\001\000\116\000\002\001\029\001\
\119\000\037\001\037\001\030\001\031\001\041\001\118\000\037\001\
\001\000\001\000\046\000\047\000\048\000\001\000\024\000\127\000\
\002\001\053\000\170\000\024\000\006\001\007\001\001\000\009\001\
\106\000\011\001\012\001\013\001\110\000\111\000\112\000\024\000\
\024\000\002\001\037\001\021\001\024\000\039\001\024\001\041\001\
\026\001\027\001\023\001\001\000\025\001\024\000\001\000\083\000\
\001\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\037\001\002\001\046\001\037\001\001\000\044\001\
\050\001\001\000\024\000\048\001\049\001\024\000\001\000\024\000\
\001\000\001\000\001\000\001\000\001\000\037\001\037\001\025\001\
\116\000\117\000\194\000\119\000\120\000\024\000\039\001\199\000\
\024\000\125\000\038\001\038\001\037\001\024\000\038\001\024\000\
\024\000\024\000\024\000\024\000\015\001\016\001\017\001\018\001\
\019\001\141\000\028\001\029\001\030\001\031\001\146\000\147\000\
\148\000\149\000\150\000\038\001\152\000\153\000\154\000\037\001\
\037\001\002\001\037\001\037\001\037\001\006\001\007\001\037\001\
\009\001\171\000\011\001\012\001\013\001\015\001\016\001\037\001\
\037\001\173\000\020\001\043\001\021\001\002\001\039\001\024\001\
\014\001\026\001\038\001\038\001\038\001\038\001\023\001\039\001\
\039\001\038\001\038\001\037\001\198\000\040\001\027\001\039\001\
\039\001\039\001\048\001\039\001\022\001\046\001\024\000\039\001\
\039\001\050\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\039\001\038\001\039\001\040\001\049\001\
\042\001\022\001\039\001\039\001\039\001\047\001\039\001\028\001\
\029\001\039\001\039\001\032\001\033\001\034\001\035\001\036\001\
\039\001\038\001\039\001\040\001\044\001\042\001\039\001\038\001\
\038\001\038\001\047\001\039\001\198\000\038\001\038\001\169\000\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\046\001\028\001\
\029\001\255\255\050\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\255\255\042\001\022\001\255\255\
\255\255\255\255\047\001\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\022\001\042\001\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\022\001\042\001\255\255\255\255\
\255\255\255\255\047\001\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\022\001\
\042\001\255\255\255\255\255\255\255\255\047\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\040\001\022\001\042\001\255\255\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\040\001\022\001\042\001\255\255\
\255\255\255\255\255\255\047\001\255\255\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\255\255\038\001\039\001\040\001\
\255\255\042\001\255\255\255\255\255\255\255\255\047\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\047\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\255\255\042\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\255\255\255\255\255\255\
\255\255\042\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\042\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\255\255\255\255\255\255\042\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\040\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\039\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\039\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\039\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\038\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\038\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\255\255\038\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\038\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\038\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\255\255\038\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001"

let yynames_const = "\
  EOF\000\
  TRUE\000\
  FALSE\000\
  RECT\000\
  CIRCLE\000\
  TRIANGLE\000\
  LINE\000\
  FORCE\000\
  WIN\000\
  FPS\000\
  BACKGROUND\000\
  COLONEQUAL\000\
  DOT_X\000\
  DOT_Y\000\
  DOT_WIDTH\000\
  DOT_HEIGHT\000\
  DOT_COLOR\000\
  DOT_RADIUS\000\
  WHILE\000\
  DO\000\
  DONE\000\
  BEGIN\000\
  END\000\
  RETURN\000\
  VAR\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  EQUALEQUAL\000\
  GREATER\000\
  SMALLER\000\
  GREATEREQUAL\000\
  SMALLEREQUAL\000\
  LPAR\000\
  RPAR\000\
  SEMICOLON\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ENDIF\000\
  PRINT\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
      ( [] )
# 518 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.program) in
    Obj.repr(
# 36 "parser.mly"
                   ( _1 :: _2 )
# 526 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 40 "parser.mly"
           ( Vardecl _1 )
# 533 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'win_decl) in
    Obj.repr(
# 41 "parser.mly"
           (Win _1)
# 540 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_decl) in
    Obj.repr(
# 42 "parser.mly"
            ( Rect _1 )
# 547 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_move) in
    Obj.repr(
# 43 "parser.mly"
            ( RectMove _1 )
# 554 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_x) in
    Obj.repr(
# 44 "parser.mly"
                ( RectChangeX _1 )
# 561 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_y) in
    Obj.repr(
# 45 "parser.mly"
                ( RectChangeY _1 )
# 568 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_width) in
    Obj.repr(
# 46 "parser.mly"
                    ( RectChangeWidth _1 )
# 575 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_height) in
    Obj.repr(
# 47 "parser.mly"
                     ( RectChangeHeight _1 )
# 582 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_color) in
    Obj.repr(
# 48 "parser.mly"
                    ( RectChangeColor _1 )
# 589 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_decl) in
    Obj.repr(
# 49 "parser.mly"
              ( Circle _1 )
# 596 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_move) in
    Obj.repr(
# 50 "parser.mly"
              ( CircleMove _1 )
# 603 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_x) in
    Obj.repr(
# 51 "parser.mly"
                  ( CircleChangeX _1 )
# 610 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_y) in
    Obj.repr(
# 52 "parser.mly"
                  ( CircleChangeY _1 )
# 617 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_radius) in
    Obj.repr(
# 53 "parser.mly"
                       ( CircleChangeRadius _1 )
# 624 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line_decl) in
    Obj.repr(
# 54 "parser.mly"
            ( Line _1 )
# 631 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 55 "parser.mly"
          ( Fundef _1 )
# 638 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 56 "parser.mly"
        ( Instr _1 )
# 645 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                 ( Expr _1 )
# 652 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_fps) in
    Obj.repr(
# 58 "parser.mly"
          ( SetFps _1 )
# 659 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_background) in
    Obj.repr(
# 59 "parser.mly"
                 ( SetBackground _1 )
# 666 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "parser.mly"
                      ( (_2, Scalar) )
# 673 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                             ( (_2, (Array _4)) )
# 681 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 67 "parser.mly"
    ( { r_name = _2 ; r_params = _4 } )
# 689 "parser.ml"
               : 'rect_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 71 "parser.mly"
    ( { w_name = _2 ; w_params = _4 } )
# 697 "parser.ml"
               : 'win_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 75 "parser.mly"
    ( { r_name = _2 ; r_params = _4 } )
# 705 "parser.ml"
               : 'rect_move))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 713 "parser.ml"
               : 'rect_change_x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 721 "parser.ml"
               : 'rect_change_y))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 729 "parser.ml"
               : 'rect_change_width))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 737 "parser.ml"
               : 'rect_change_height))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 745 "parser.ml"
               : 'rect_change_color))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 99 "parser.mly"
    ( { c_name = _2 ; c_params = _4 } )
# 753 "parser.ml"
               : 'circle_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 103 "parser.mly"
    ( { c_name = _2 ; c_params = _4 } )
# 761 "parser.ml"
               : 'circle_move))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 769 "parser.ml"
               : 'circle_change_x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 777 "parser.ml"
               : 'circle_change_y))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 785 "parser.ml"
               : 'circle_change_radius))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 121 "parser.mly"
    ( { l_name = _2 ; l_params = _4 } )
# 793 "parser.ml"
               : 'line_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
    ( { fps = _3 } )
# 800 "parser.ml"
               : 'set_fps))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 129 "parser.mly"
    ( { colors = _3 } )
# 807 "parser.ml"
               : 'set_background))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
  ( [] )
# 813 "parser.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 133 "parser.mly"
             ( _1 :: _2 )
# 821 "parser.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "parser.mly"
  ( [] )
# 827 "parser.ml"
               : 'opt_var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_var_decls) in
    Obj.repr(
# 137 "parser.mly"
                         ( _1 :: _2 )
# 835 "parser.ml"
               : 'opt_var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 141 "parser.mly"
        ( _1 )
# 842 "parser.ml"
               : 'instrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instrs) in
    Obj.repr(
# 142 "parser.mly"
               ( Seq (_1, _2) )
# 850 "parser.ml"
               : 'instrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'opt_params) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_var_decls) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 146 "parser.mly"
    ( { f_name = _1 ; params = _3 ; vars = _6 ; body = _7 } )
# 860 "parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
  ( [] )
# 866 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 153 "parser.mly"
               ( _1 :: _2 )
# 874 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
  ( [] )
# 880 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 158 "parser.mly"
                     ( _2 :: _3 )
# 888 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'instrs) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 164 "parser.mly"
    ( If (_2, _4, _6) )
# 897 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 166 "parser.mly"
    ( While (_2, _4) )
# 905 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
    ( Assign (_1, _3) )
# 913 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
    ( ArrayWrite (_1, _3, _6) )
# 922 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 172 "parser.mly"
    ( _2 )
# 929 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 175 "parser.mly"
    ( Vardecl _1 )
# 936 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'win_decl) in
    Obj.repr(
# 177 "parser.mly"
    ( Win _1 )
# 943 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_decl) in
    Obj.repr(
# 179 "parser.mly"
    ( Rect _1 )
# 950 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_move) in
    Obj.repr(
# 181 "parser.mly"
    ( RectMove _1 )
# 957 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_x) in
    Obj.repr(
# 183 "parser.mly"
    ( RectChangeX _1 )
# 964 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_y) in
    Obj.repr(
# 185 "parser.mly"
    ( RectChangeY _1 )
# 971 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_width) in
    Obj.repr(
# 187 "parser.mly"
    ( RectChangeWidth _1 )
# 978 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_height) in
    Obj.repr(
# 189 "parser.mly"
    ( RectChangeHeight _1 )
# 985 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_color) in
    Obj.repr(
# 191 "parser.mly"
    ( RectChangeColor _1 )
# 992 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_decl) in
    Obj.repr(
# 193 "parser.mly"
    ( Circle _1 )
# 999 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_move) in
    Obj.repr(
# 195 "parser.mly"
    ( CircleMove _1 )
# 1006 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_x) in
    Obj.repr(
# 197 "parser.mly"
    ( CircleChangeX _1 )
# 1013 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_y) in
    Obj.repr(
# 199 "parser.mly"
    ( CircleChangeY _1 )
# 1020 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_radius) in
    Obj.repr(
# 201 "parser.mly"
    ( CircleChangeRadius _1 )
# 1027 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line_decl) in
    Obj.repr(
# 203 "parser.mly"
    ( Line _1 )
# 1034 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_fps) in
    Obj.repr(
# 205 "parser.mly"
    ( SetFps _1 )
# 1041 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_background) in
    Obj.repr(
# 207 "parser.mly"
    ( SetBackground _1 )
# 1048 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expr) in
    Obj.repr(
# 209 "parser.mly"
    ( Return _2 )
# 1055 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exprs) in
    Obj.repr(
# 211 "parser.mly"
    ( Iapp (_1, _3) )
# 1063 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exprs) in
    Obj.repr(
# 213 "parser.mly"
    ( Print _3 )
# 1070 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_exprs) in
    Obj.repr(
# 218 "parser.mly"
                                 ( App (_1, _3) )
# 1078 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
                                 ( Binop ("==", _1, _3) )
# 1086 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 220 "parser.mly"
                                 ( Binop (">", _1, _3) )
# 1094 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 221 "parser.mly"
                                 ( Binop (">=", _1, _3) )
# 1102 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 222 "parser.mly"
                                 ( Binop ("<", _1, _3) )
# 1110 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "parser.mly"
                                 ( Binop ("<=", _1, _3) )
# 1118 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "parser.mly"
                                 ( Binop ("+", _1, _3) )
# 1126 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 225 "parser.mly"
                                 ( Binop ("-", _1, _3) )
# 1134 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 226 "parser.mly"
                                 ( Binop ("*", _1, _3) )
# 1142 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 227 "parser.mly"
                                 ( Binop ("/", _1, _3) )
# 1150 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 228 "parser.mly"
                                 ( Monop ("-", _2) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 229 "parser.mly"
                                 ( _2 )
# 1164 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 230 "parser.mly"
                                 ( _1 )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 231 "parser.mly"
                                 ( ArrayRead (_1, _3) )
# 1179 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "parser.mly"
  ( None )
# 1185 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
                     ( Some _1 )
# 1192 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "parser.mly"
  ( [] )
# 1198 "parser.ml"
               : 'opt_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 242 "parser.mly"
                           ( _1 :: _2 )
# 1206 "parser.ml"
               : 'opt_exprs))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "parser.mly"
  ( [] )
# 1212 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 247 "parser.mly"
                           ( _2 :: _3 )
# 1220 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 251 "parser.mly"
                 ( Int (_1) )
# 1227 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
                 ( Bool (true) )
# 1233 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "parser.mly"
                 ( Bool (false) )
# 1239 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 254 "parser.mly"
                 ( String (_1) )
# 1246 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 255 "parser.mly"
                 ( Ident (_1) )
# 1253 "parser.ml"
               : 'atom))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
