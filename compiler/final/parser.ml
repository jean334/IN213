type token =
  | EOF
  | INT of (
# 6 "parser.mly"
        int
# 7 "parser.ml"
)
  | FLOAT of (
# 7 "parser.mly"
        float
# 12 "parser.ml"
)
  | SIN
  | COS
  | IDENT of (
# 9 "parser.mly"
        string
# 19 "parser.ml"
)
  | STRING of (
# 10 "parser.mly"
        string
# 24 "parser.ml"
)
  | TRUE
  | FALSE
  | RECT
  | URECT
  | CIRCLE
  | UCIRCLE
  | TRIANGLE
  | LINE
  | FORCE
  | WIN
  | FPS
  | FUNC
  | BACKGROUND
  | COLONEQUAL
  | DOT_X
  | DOT_Y
  | DOT_WIDTH
  | DOT_HEIGHT
  | DOT_COLOR
  | DOT_RADIUS
  | WHILE
  | DO
  | DONE
  | BEGIN
  | END
  | RETURN
  | VAR
  | PLUS
  | MINUS
  | MULT
  | DIV
  | EQUALEQUAL
  | GREATER
  | SMALLER
  | GREATEREQUAL
  | SMALLEREQUAL
  | LPAR
  | RPAR
  | SEMICOLON
  | COMMA
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | DOT
  | IF
  | THEN
  | ELSE
  | ENDIF
  | PRINT

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
open Ast ;;
# 81 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  259 (* SIN *);
  260 (* COS *);
  263 (* TRUE *);
  264 (* FALSE *);
  265 (* RECT *);
  266 (* URECT *);
  267 (* CIRCLE *);
  268 (* UCIRCLE *);
  269 (* TRIANGLE *);
  270 (* LINE *);
  271 (* FORCE *);
  272 (* WIN *);
  273 (* FPS *);
  274 (* FUNC *);
  275 (* BACKGROUND *);
  276 (* COLONEQUAL *);
  277 (* DOT_X *);
  278 (* DOT_Y *);
  279 (* DOT_WIDTH *);
  280 (* DOT_HEIGHT *);
  281 (* DOT_COLOR *);
  282 (* DOT_RADIUS *);
  283 (* WHILE *);
  284 (* DO *);
  285 (* DONE *);
  286 (* BEGIN *);
  287 (* END *);
  288 (* RETURN *);
  289 (* VAR *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* MULT *);
  293 (* DIV *);
  294 (* EQUALEQUAL *);
  295 (* GREATER *);
  296 (* SMALLER *);
  297 (* GREATEREQUAL *);
  298 (* SMALLEREQUAL *);
  299 (* LPAR *);
  300 (* RPAR *);
  301 (* SEMICOLON *);
  302 (* COMMA *);
  303 (* LBRACKET *);
  304 (* RBRACKET *);
  305 (* LBRACE *);
  306 (* RBRACE *);
  307 (* DOT *);
  308 (* IF *);
  309 (* THEN *);
  310 (* ELSE *);
  311 (* ENDIF *);
  312 (* PRINT *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  261 (* IDENT *);
  262 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\005\000\004\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\023\000\024\000\025\000\018\000\019\000\026\000\026\000\
\028\000\028\000\029\000\029\000\020\000\030\000\030\000\031\000\
\031\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\032\000\032\000\033\000\
\033\000\027\000\027\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\001\000\
\001\000\003\000\006\000\006\000\006\000\006\000\007\000\007\000\
\007\000\007\000\007\000\006\000\006\000\007\000\007\000\007\000\
\006\000\005\000\005\000\006\000\005\000\005\000\000\000\002\000\
\000\000\002\000\001\000\002\000\008\000\000\000\002\000\000\000\
\003\000\007\000\005\000\004\000\007\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\005\000\005\000\004\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\004\000\004\000\003\000\001\000\004\000\000\000\001\000\000\000\
\002\000\000\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\108\000\109\000\000\000\000\000\000\000\
\112\000\110\000\111\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\114\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\023\000\024\000\025\000\100\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\080\000\081\000\000\000\078\000\079\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\062\000\
\083\000\026\000\000\000\099\000\000\000\000\000\000\000\000\000\
\094\000\095\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\055\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\000\000\000\000\000\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\043\000\097\000\
\098\000\086\000\101\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\057\000\107\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\030\000\036\000\
\000\000\000\000\000\000\037\000\041\000\029\000\044\000\027\000\
\000\000\050\000\000\000\061\000\031\000\032\000\033\000\034\000\
\035\000\038\000\039\000\040\000\058\000\053\000"

let yydgoto = "\002\000\
\029\000\030\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\048\000\093\000\140\000\094\000\095\000\
\096\000\141\000\174\000\247\000\097\000\121\000\172\000\099\000\
\122\000\054\000"

let yysindex = "\013\000\
\001\000\000\000\000\000\000\000\000\000\237\254\240\254\080\255\
\000\000\000\000\000\000\075\255\082\255\090\255\105\255\115\255\
\116\255\042\255\120\255\114\255\128\255\040\255\128\255\154\255\
\128\255\128\255\128\255\121\255\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\001\000\000\000\000\000\000\000\000\128\255\128\255\
\128\255\137\255\128\255\131\255\227\255\138\255\250\254\139\255\
\140\255\128\255\146\255\128\255\152\255\156\255\234\254\197\000\
\158\255\161\255\153\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\255\000\000\000\000\000\000\
\094\255\014\002\113\255\056\255\069\255\083\001\177\000\128\255\
\000\000\128\255\128\255\128\255\128\255\128\255\128\255\128\255\
\128\255\128\255\000\000\094\001\105\001\035\001\232\254\010\001\
\118\255\132\255\206\000\128\255\162\255\163\255\164\255\166\255\
\167\255\128\255\128\255\169\255\170\255\172\255\128\255\128\255\
\128\255\116\001\128\255\010\001\173\255\128\255\128\255\128\255\
\128\255\040\255\128\255\128\255\128\255\128\255\000\000\000\000\
\000\000\000\000\128\255\000\000\040\255\174\255\069\255\069\255\
\000\000\000\000\133\255\133\255\133\255\133\255\133\255\171\255\
\188\255\000\000\192\255\000\000\128\255\000\000\159\255\193\255\
\217\255\199\255\128\255\128\255\128\255\128\255\128\255\202\255\
\203\255\128\255\128\255\128\255\209\255\210\255\211\255\212\255\
\228\255\000\000\232\255\127\001\138\001\234\255\221\000\250\255\
\149\001\160\001\236\255\236\000\251\000\229\255\237\255\000\000\
\000\000\235\255\010\001\223\255\000\000\128\255\240\255\171\001\
\182\001\193\001\204\001\215\001\241\255\243\255\226\001\237\001\
\248\001\246\255\248\255\249\255\000\000\251\255\000\000\000\000\
\000\000\000\000\000\000\000\000\171\255\188\255\193\255\217\255\
\252\255\040\255\000\000\000\000\000\000\223\255\040\255\047\001\
\000\000\253\255\254\255\002\000\007\000\018\000\000\000\000\000\
\022\000\025\000\026\000\000\000\000\000\000\000\000\000\000\000\
\247\255\000\000\245\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\186\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\148\255\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\020\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\002\044\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\033\000\033\000\000\000\000\000\000\000\033\000\033\000\
\033\000\000\000\033\000\044\000\000\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\062\000\
\000\000\000\000\081\000\100\000\119\000\138\000\157\000\023\002\
\032\002\000\000\000\000\000\000\000\000\000\000\000\000\041\002\
\071\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\044\000\072\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\015\001\000\000\255\255\003\000\004\000\006\000\008\000\009\000\
\010\000\011\000\012\000\016\000\017\000\064\000\067\000\068\000\
\077\000\078\000\092\000\000\000\136\000\005\000\145\000\160\000\
\164\000\105\000\119\255\059\000\165\255\000\000\096\000\000\000\
\160\255\000\000"

let yytablesize = 851
let yytable = "\031\000\
\003\000\151\000\194\000\032\000\033\000\050\000\034\000\158\000\
\035\000\036\000\037\000\038\000\039\000\001\000\132\000\133\000\
\040\000\041\000\144\000\134\000\144\000\171\000\145\000\055\000\
\145\000\072\000\056\000\098\000\031\000\101\000\102\000\103\000\
\032\000\033\000\050\000\034\000\135\000\035\000\036\000\037\000\
\038\000\039\000\073\000\074\000\075\000\040\000\041\000\198\000\
\012\000\013\000\014\000\015\000\203\000\016\000\200\000\017\000\
\018\000\019\000\020\000\116\000\117\000\118\000\120\000\123\000\
\042\000\206\000\021\000\043\000\044\000\022\000\138\000\023\000\
\024\000\245\000\049\000\049\000\049\000\045\000\046\000\060\000\
\049\000\049\000\049\000\049\000\066\000\049\000\061\000\049\000\
\049\000\049\000\049\000\027\000\047\000\042\000\062\000\028\000\
\043\000\044\000\049\000\057\000\154\000\049\000\155\000\049\000\
\108\000\109\000\045\000\046\000\120\000\063\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\064\000\
\065\000\047\000\058\000\049\000\152\000\067\000\059\000\049\000\
\004\000\005\000\069\000\070\000\071\000\009\000\010\000\011\000\
\049\000\004\000\005\000\069\000\070\000\119\000\009\000\010\000\
\011\000\051\000\196\000\197\000\120\000\199\000\009\001\201\000\
\202\000\120\000\204\000\011\001\068\000\153\000\100\000\205\000\
\052\000\175\000\025\000\104\000\053\000\049\000\106\000\107\000\
\108\000\109\000\026\000\025\000\057\000\124\000\051\000\176\000\
\051\000\211\000\051\000\026\000\131\000\136\000\137\000\216\000\
\217\000\218\000\219\000\220\000\139\000\052\000\223\000\224\000\
\225\000\053\000\142\000\149\000\210\000\051\000\143\000\150\000\
\147\000\051\000\051\000\148\000\179\000\180\000\181\000\212\000\
\182\000\183\000\246\000\186\000\187\000\113\000\188\000\208\000\
\195\000\207\000\248\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\178\000\113\000\113\000\113\000\
\209\000\113\000\184\000\185\000\214\000\213\000\113\000\189\000\
\190\000\191\000\215\000\193\000\246\000\221\000\222\000\125\000\
\126\000\127\000\128\000\129\000\226\000\227\000\228\000\024\000\
\229\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\015\000\130\000\016\000\230\000\
\017\000\018\000\019\000\020\000\231\000\234\000\236\000\239\000\
\171\000\243\000\242\000\021\000\249\000\255\000\022\000\000\001\
\023\000\024\000\004\001\025\000\005\001\006\001\022\001\007\001\
\008\001\013\001\014\001\026\000\105\000\021\001\015\001\096\000\
\010\001\244\000\000\000\016\001\027\000\096\000\096\000\000\000\
\028\000\096\000\096\000\096\000\096\000\096\000\017\001\096\000\
\096\000\096\000\018\001\096\000\092\000\019\001\020\001\102\000\
\096\000\054\000\092\000\092\000\047\000\104\000\092\000\092\000\
\092\000\092\000\092\000\103\000\092\000\092\000\092\000\106\000\
\092\000\093\000\056\000\000\000\000\000\092\000\000\000\093\000\
\093\000\000\000\000\000\093\000\093\000\093\000\093\000\093\000\
\000\000\093\000\093\000\093\000\087\000\093\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\087\000\087\000\
\087\000\087\000\087\000\000\000\087\000\087\000\087\000\088\000\
\087\000\000\000\000\000\000\000\000\000\087\000\000\000\000\000\
\000\000\088\000\088\000\088\000\088\000\088\000\000\000\088\000\
\088\000\088\000\090\000\088\000\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\000\000\090\000\090\000\090\000\090\000\
\090\000\000\000\090\000\090\000\090\000\089\000\090\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\000\000\089\000\
\089\000\089\000\089\000\089\000\000\000\089\000\089\000\089\000\
\091\000\089\000\000\000\000\000\000\000\000\000\089\000\000\000\
\000\000\000\000\091\000\091\000\091\000\091\000\091\000\000\000\
\091\000\091\000\091\000\000\000\091\000\000\000\000\000\000\000\
\000\000\091\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\000\000\000\000\000\000\000\000\000\000\
\146\000\000\000\000\000\000\000\000\000\157\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\000\000\000\000\000\000\000\000\000\000\177\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\000\000\
\000\000\000\000\000\000\000\000\235\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\000\000\000\000\
\000\000\000\000\000\000\240\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\000\000\000\000\000\000\
\000\000\000\000\241\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\000\000\000\000\000\000\173\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\000\000\000\000\115\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\000\000\000\000\170\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\000\000\000\000\012\001\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\000\000\000\000\113\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\101\000\000\000\000\000\101\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\000\000\156\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\000\000\168\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\000\000\169\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\000\000\192\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\000\000\232\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\000\000\233\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\000\000\
\237\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\000\000\238\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\000\000\250\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\000\000\251\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\000\000\252\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\000\000\253\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\000\000\254\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\000\000\001\001\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\000\000\
\002\001\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\000\000\003\001\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\000\000\056\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000"

let yycheck = "\001\000\
\000\000\093\000\140\000\001\000\001\000\001\000\001\000\104\000\
\001\000\001\000\001\000\001\000\001\000\001\000\021\001\022\001\
\001\000\001\000\043\001\026\001\043\001\046\001\047\001\043\001\
\047\001\021\000\043\001\023\000\030\000\025\000\026\000\027\000\
\030\000\030\000\030\000\030\000\043\001\030\000\030\000\030\000\
\030\000\030\000\003\001\004\001\005\001\030\000\030\000\144\000\
\009\001\010\001\011\001\012\001\149\000\014\001\146\000\016\001\
\017\001\018\001\019\001\055\000\056\000\057\000\058\000\059\000\
\001\000\157\000\027\001\001\000\001\000\030\001\066\000\032\001\
\033\001\211\000\003\001\004\001\005\001\001\000\001\000\005\001\
\009\001\010\001\011\001\012\001\043\001\014\001\005\001\016\001\
\017\001\018\001\019\001\052\001\001\000\030\000\005\001\056\001\
\030\000\030\000\027\001\020\001\045\001\030\001\047\001\032\001\
\036\001\037\001\030\000\030\000\104\000\005\001\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\005\001\
\005\001\030\000\043\001\052\001\031\001\006\001\047\001\056\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\001\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\001\000\142\000\143\000\144\000\145\000\242\000\147\000\
\148\000\149\000\150\000\247\000\043\001\045\001\005\001\155\000\
\001\000\044\001\035\001\043\001\001\000\030\000\034\001\035\001\
\036\001\037\001\043\001\035\001\020\001\043\001\030\000\044\001\
\029\001\173\000\031\001\043\001\043\001\043\001\043\001\179\000\
\180\000\181\000\182\000\183\000\043\001\030\000\186\000\187\000\
\188\000\030\000\043\001\043\001\005\001\050\001\043\001\047\001\
\043\001\054\001\055\001\043\001\043\001\043\001\043\001\049\001\
\043\001\043\001\212\000\043\001\043\001\028\001\043\001\045\001\
\044\001\044\001\214\000\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\124\000\044\001\045\001\046\001\
\045\001\048\001\130\000\131\000\020\001\045\001\053\001\135\000\
\136\000\137\000\044\001\139\000\246\000\044\001\044\001\021\001\
\022\001\023\001\024\001\025\001\044\001\044\001\044\001\033\001\
\045\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\043\001\014\001\044\001\
\016\001\017\001\018\001\019\001\045\001\044\001\029\001\044\001\
\046\001\045\001\054\001\027\001\045\001\045\001\030\001\045\001\
\032\001\033\001\045\001\035\001\045\001\045\001\050\001\045\001\
\045\001\045\001\045\001\043\001\030\000\055\001\045\001\028\001\
\246\000\210\000\255\255\045\001\052\001\034\001\035\001\255\255\
\056\001\038\001\039\001\040\001\041\001\042\001\045\001\044\001\
\045\001\046\001\045\001\048\001\028\001\045\001\045\001\045\001\
\053\001\044\001\034\001\035\001\044\001\044\001\038\001\039\001\
\040\001\041\001\042\001\045\001\044\001\045\001\046\001\044\001\
\048\001\028\001\044\001\255\255\255\255\053\001\255\255\034\001\
\035\001\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\045\001\046\001\028\001\048\001\255\255\255\255\
\255\255\255\255\053\001\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\045\001\046\001\028\001\
\048\001\255\255\255\255\255\255\255\255\053\001\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\045\001\046\001\028\001\048\001\255\255\255\255\255\255\255\255\
\053\001\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\028\001\048\001\255\255\
\255\255\255\255\255\255\053\001\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\045\001\046\001\
\028\001\048\001\255\255\255\255\255\255\255\255\053\001\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\045\001\046\001\255\255\048\001\255\255\255\255\255\255\
\255\255\053\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\255\255\053\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\048\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\048\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\255\255\048\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\255\255\255\255\046\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\255\255\045\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\045\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\255\255\045\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\045\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\255\255\045\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\044\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\044\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\044\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\044\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\044\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001"

let yynames_const = "\
  EOF\000\
  SIN\000\
  COS\000\
  TRUE\000\
  FALSE\000\
  RECT\000\
  URECT\000\
  CIRCLE\000\
  UCIRCLE\000\
  TRIANGLE\000\
  LINE\000\
  FORCE\000\
  WIN\000\
  FPS\000\
  FUNC\000\
  BACKGROUND\000\
  COLONEQUAL\000\
  DOT_X\000\
  DOT_Y\000\
  DOT_WIDTH\000\
  DOT_HEIGHT\000\
  DOT_COLOR\000\
  DOT_RADIUS\000\
  WHILE\000\
  DO\000\
  DONE\000\
  BEGIN\000\
  END\000\
  RETURN\000\
  VAR\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  EQUALEQUAL\000\
  GREATER\000\
  SMALLER\000\
  GREATEREQUAL\000\
  SMALLEREQUAL\000\
  LPAR\000\
  RPAR\000\
  SEMICOLON\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ENDIF\000\
  PRINT\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  IDENT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
      ( [] )
# 592 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.program) in
    Obj.repr(
# 41 "parser.mly"
                   ( _1 :: _2 )
# 600 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 45 "parser.mly"
           ( Vardecl _1 )
# 607 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'win_decl) in
    Obj.repr(
# 46 "parser.mly"
           (Win _1)
# 614 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_decl) in
    Obj.repr(
# 47 "parser.mly"
            ( Rect _1 )
# 621 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_move) in
    Obj.repr(
# 48 "parser.mly"
            ( RectMove _1 )
# 628 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_x) in
    Obj.repr(
# 49 "parser.mly"
                ( RectChangeX _1 )
# 635 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_y) in
    Obj.repr(
# 50 "parser.mly"
                ( RectChangeY _1 )
# 642 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_width) in
    Obj.repr(
# 51 "parser.mly"
                    ( RectChangeWidth _1 )
# 649 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_height) in
    Obj.repr(
# 52 "parser.mly"
                     ( RectChangeHeight _1 )
# 656 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_color) in
    Obj.repr(
# 53 "parser.mly"
                    ( RectChangeColor _1 )
# 663 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_decl) in
    Obj.repr(
# 54 "parser.mly"
              ( Circle _1 )
# 670 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_move) in
    Obj.repr(
# 55 "parser.mly"
              ( CircleMove _1 )
# 677 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_x) in
    Obj.repr(
# 56 "parser.mly"
                  ( CircleChangeX _1 )
# 684 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_y) in
    Obj.repr(
# 57 "parser.mly"
                  ( CircleChangeY _1 )
# 691 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_radius) in
    Obj.repr(
# 58 "parser.mly"
                       ( CircleChangeRadius _1 )
# 698 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line_decl) in
    Obj.repr(
# 59 "parser.mly"
            ( Line _1 )
# 705 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sin_decl) in
    Obj.repr(
# 60 "parser.mly"
           ( Printf.printf "test\n"; Sin _1 )
# 712 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cos_decl) in
    Obj.repr(
# 61 "parser.mly"
           ( Cos _1 )
# 719 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 62 "parser.mly"
          ( Fundef _1 )
# 726 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 63 "parser.mly"
        ( Instr _1 )
# 733 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                 ( Expr _1 )
# 740 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_fps) in
    Obj.repr(
# 65 "parser.mly"
          ( SetFps _1 )
# 747 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_background) in
    Obj.repr(
# 66 "parser.mly"
                 ( SetBackground _1 )
# 754 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'math_func) in
    Obj.repr(
# 68 "parser.mly"
            ( MathFunc _1 )
# 761 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 72 "parser.mly"
                      ( (_2, Scalar) )
# 768 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                                             ( (_2, (Array _4)) )
# 776 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 76 "parser.mly"
    ( { r_name = _2 ; r_params = _4 } )
# 784 "parser.ml"
               : 'rect_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 80 "parser.mly"
    ( { w_name = _2 ; w_params = _4 } )
# 792 "parser.ml"
               : 'win_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 84 "parser.mly"
    ( { r_name = _2 ; r_params = _4 } )
# 800 "parser.ml"
               : 'rect_move))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 808 "parser.ml"
               : 'rect_change_x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 816 "parser.ml"
               : 'rect_change_y))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 824 "parser.ml"
               : 'rect_change_width))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 832 "parser.ml"
               : 'rect_change_height))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
    ( { r_name = _2 ; r_params = _5 } )
# 840 "parser.ml"
               : 'rect_change_color))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 108 "parser.mly"
    ( { c_name = _2 ; c_params = _4 } )
# 848 "parser.ml"
               : 'circle_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 112 "parser.mly"
    ( { c_name = _2 ; c_params = _4 } )
# 856 "parser.ml"
               : 'circle_move))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 864 "parser.ml"
               : 'circle_change_x))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 872 "parser.ml"
               : 'circle_change_y))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
    ( { c_name = _2 ; c_params = _5 } )
# 880 "parser.ml"
               : 'circle_change_radius))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 130 "parser.mly"
    ( { l_name = _2 ; l_params = _4 } )
# 888 "parser.ml"
               : 'line_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
    ( { fps = _3 } )
# 895 "parser.ml"
               : 'set_fps))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 138 "parser.mly"
    ( { colors = _3 } )
# 902 "parser.ml"
               : 'set_background))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    Obj.repr(
# 142 "parser.mly"
    ( { f_name = _2 ; f_params = _4 } )
# 910 "parser.ml"
               : 'math_func))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
    ( _3 )
# 917 "parser.ml"
               : 'sin_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
    ( _3 )
# 924 "parser.ml"
               : 'cos_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
  ( [] )
# 930 "parser.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 154 "parser.mly"
             ( _1 :: _2 )
# 938 "parser.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
  ( [] )
# 944 "parser.ml"
               : 'opt_var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_var_decls) in
    Obj.repr(
# 158 "parser.mly"
                         ( _1 :: _2 )
# 952 "parser.ml"
               : 'opt_var_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 162 "parser.mly"
        ( _1 )
# 959 "parser.ml"
               : 'instrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instrs) in
    Obj.repr(
# 163 "parser.mly"
               ( Seq (_1, _2) )
# 967 "parser.ml"
               : 'instrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'opt_params) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'opt_var_decls) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 167 "parser.mly"
    ( { f_name = _1 ; params = _3 ; vars = _6 ; body = _7 } )
# 977 "parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
  ( [] )
# 983 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 174 "parser.mly"
               ( _1 :: _2 )
# 991 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
  ( [] )
# 997 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 179 "parser.mly"
                     ( _2 :: _3 )
# 1005 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'instrs) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 185 "parser.mly"
    ( If (_2, _4, _6) )
# 1014 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 187 "parser.mly"
    ( While (_2, _4) )
# 1022 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
    ( Assign (_1, _3) )
# 1030 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
    ( ArrayWrite (_1, _3, _6) )
# 1039 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instrs) in
    Obj.repr(
# 197 "parser.mly"
    ( _2 )
# 1046 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 200 "parser.mly"
    ( Vardecl _1 )
# 1053 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'win_decl) in
    Obj.repr(
# 202 "parser.mly"
    ( Win _1 )
# 1060 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_decl) in
    Obj.repr(
# 204 "parser.mly"
    ( Rect _1 )
# 1067 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_move) in
    Obj.repr(
# 206 "parser.mly"
    ( RectMove _1 )
# 1074 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_x) in
    Obj.repr(
# 208 "parser.mly"
    ( RectChangeX _1 )
# 1081 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_y) in
    Obj.repr(
# 210 "parser.mly"
    ( RectChangeY _1 )
# 1088 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_width) in
    Obj.repr(
# 212 "parser.mly"
    ( RectChangeWidth _1 )
# 1095 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_height) in
    Obj.repr(
# 214 "parser.mly"
    ( RectChangeHeight _1 )
# 1102 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rect_change_color) in
    Obj.repr(
# 216 "parser.mly"
    ( RectChangeColor _1 )
# 1109 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_decl) in
    Obj.repr(
# 218 "parser.mly"
    ( Circle _1 )
# 1116 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_move) in
    Obj.repr(
# 220 "parser.mly"
    ( CircleMove _1 )
# 1123 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_x) in
    Obj.repr(
# 222 "parser.mly"
    ( CircleChangeX _1 )
# 1130 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_y) in
    Obj.repr(
# 224 "parser.mly"
    ( CircleChangeY _1 )
# 1137 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'circle_change_radius) in
    Obj.repr(
# 226 "parser.mly"
    ( CircleChangeRadius _1 )
# 1144 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line_decl) in
    Obj.repr(
# 228 "parser.mly"
    ( Line _1 )
# 1151 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_fps) in
    Obj.repr(
# 230 "parser.mly"
    ( SetFps _1 )
# 1158 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'set_background) in
    Obj.repr(
# 232 "parser.mly"
    ( SetBackground _1 )
# 1165 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sin_decl) in
    Obj.repr(
# 235 "parser.mly"
    ( Sin _1 )
# 1172 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cos_decl) in
    Obj.repr(
# 237 "parser.mly"
    ( Cos _1 )
# 1179 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'math_func) in
    Obj.repr(
# 240 "parser.mly"
    ( MathFunc _1 )
# 1186 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expr) in
    Obj.repr(
# 243 "parser.mly"
    ( Return _2 )
# 1193 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exprs) in
    Obj.repr(
# 245 "parser.mly"
    ( Iapp (_1, _3) )
# 1201 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_exprs) in
    Obj.repr(
# 247 "parser.mly"
    ( Print _3 )
# 1208 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_exprs) in
    Obj.repr(
# 252 "parser.mly"
                                 ( App (_1, _3) )
# 1216 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 253 "parser.mly"
                                 ( Binop ("==", _1, _3) )
# 1224 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "parser.mly"
                                 ( Binop (">", _1, _3) )
# 1232 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 255 "parser.mly"
                                 ( Binop (">=", _1, _3) )
# 1240 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 256 "parser.mly"
                                 ( Binop ("<", _1, _3) )
# 1248 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 257 "parser.mly"
                                 ( Binop ("<=", _1, _3) )
# 1256 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 258 "parser.mly"
                                 ( Binop ("+", _1, _3) )
# 1264 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 259 "parser.mly"
                                 ( Binop ("-", _1, _3) )
# 1272 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 260 "parser.mly"
                                 ( Binop ("*", _1, _3) )
# 1280 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 261 "parser.mly"
                                 ( Binop ("/", _1, _3) )
# 1288 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 262 "parser.mly"
                                 ( Monop ("-", _2) )
# 1295 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 265 "parser.mly"
                                 ( Monop ("sin", _3) )
# 1302 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 266 "parser.mly"
                                 ( Monop ("cos", _3) )
# 1309 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 267 "parser.mly"
                                 ( _2 )
# 1316 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 268 "parser.mly"
                                 ( _1 )
# 1323 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 269 "parser.mly"
                                 ( ArrayRead (_1, _3) )
# 1331 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "parser.mly"
  ( None )
# 1337 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 275 "parser.mly"
                     ( Some _1 )
# 1344 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "parser.mly"
  ( [] )
# 1350 "parser.ml"
               : 'opt_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 280 "parser.mly"
                           ( _1 :: _2 )
# 1358 "parser.ml"
               : 'opt_exprs))
; (fun __caml_parser_env ->
    Obj.repr(
# 284 "parser.mly"
  ( [] )
# 1364 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 285 "parser.mly"
                           ( _2 :: _3 )
# 1372 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 289 "parser.mly"
                 ( Int (_1) )
# 1379 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 290 "parser.mly"
                 ( Float (_1) )
# 1386 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "parser.mly"
                 ( Bool (true) )
# 1392 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
                 ( Bool (false) )
# 1398 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 293 "parser.mly"
                 ( String (_1) )
# 1405 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 294 "parser.mly"
                 ( Ident (_1) )
# 1412 "parser.ml"
               : 'atom))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
